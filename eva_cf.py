# -*- coding: utf-8 -*-
"""eva_cf.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/131LquLfUGikJdK9XoGFWyQpfrQPG3loV
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
import os

# Load the datasets
sidereva_path = 'C:/Users/stdso/Documents/USTH/Med/BioAct-Het-main/Data/sidereva.csv'
group2eva_path = 'C:/Users/stdso/Documents/USTH/Med/BioAct-Het-main/Data/group2eva.csv'

sidereva_df = pd.read_csv(sidereva_path)
group2eva_df = pd.read_csv(group2eva_path)

print(sidereva_df)

print(group2eva_df)

# Convert 'Drug_Name' to string to ensure consistency
sidereva_df['Drug_Name'] = sidereva_df['Drug_Name'].astype(str)
group2eva_df['Drug_Name'] = group2eva_df['Drug_Name'].astype(str)

# Merge the dataframes on 'Drug_Name'
merged_df = pd.merge(sidereva_df, group2eva_df, on='Drug_Name', suffixes=('_gt', '_pred'))
print(merged_df)

# Define the ground truth columns ending with '_gt' excluding "0_gt" and "smiles_gt"
gt_columns = [col for col in merged_df.columns if col.endswith('_gt') and col not in ["Unnamed: 0_gt", "smiles_gt"]]

# Generate prediction columns by replacing '_gt' with '_pred'
pred_columns = [col.replace('_gt', '_pred') for col in gt_columns]

print(gt_columns)

num_gt_columns = len(gt_columns)

print("Number of columns related to disorders:", num_gt_columns)

print(pred_columns)

# Count the number of columns related to disorders
num_pred_columns = len(pred_columns)

print("Number of columns related to disorders:", num_pred_columns)

# Assuming merged_df, gt_columns, pred_columns are predefined
confusion_matrices = {}

# Compute confusion matrices for each drug
for drug_name in merged_df['Drug_Name'].unique():
    drug_df = merged_df[merged_df['Drug_Name'] == drug_name]
    y_true = drug_df[gt_columns].iloc[0].values.astype(int)
    y_pred_prob = drug_df[pred_columns].iloc[0].values
    y_pred = (y_pred_prob >= 0.5).astype(int)
    cm = confusion_matrix(y_true, y_pred)
    confusion_matrices[drug_name] = cm

# Define the number of drugs to plot and select the drugs
num_drugs_to_plot = 7
selected_drugs = list(confusion_matrices.keys())[:num_drugs_to_plot]

# Set the output directory
output_directory = 'C:/Users/stdso/Documents/USTH/Med/BioAct-Het-main/Output/CF'

# Ensure the output directory exists
os.makedirs(output_directory, exist_ok=True)

# Plot the confusion matrix for each selected drug and save independently
for drug_name in selected_drugs:
    cm = confusion_matrices[drug_name]

    # Create a new figure for each drug
    plt.figure(figsize=(8, 8))  # Adjusted to be square
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', annot_kws={"size": 16}, cbar=False)
    plt.title(f'Confusion Matrix for {drug_name}', size=20)
    plt.xlabel('Predicted labels', size=18)
    plt.ylabel('True labels', size=18)
    plt.gca().invert_yaxis()

    # Save each figure independently
    output_path = os.path.join(output_directory, f'{drug_name}_confusion_matrix.png')
    plt.savefig(output_path, bbox_inches='tight')

    # Close the figure to free memory
    plt.close()